(function () {
  const t = document.createElement("link").relList;
  if (t && t.supports && t.supports("modulepreload")) return;
  for (const o of document.querySelectorAll('link[rel="modulepreload"]')) a(o);
  new MutationObserver((o) => {
    for (const e of o)
      if (e.type === "childList")
        for (const r of e.addedNodes)
          r.tagName === "LINK" && r.rel === "modulepreload" && a(r);
  }).observe(document, { childList: !0, subtree: !0 });
  function i(o) {
    const e = {};
    return (
      o.integrity && (e.integrity = o.integrity),
      o.referrerPolicy && (e.referrerPolicy = o.referrerPolicy),
      o.crossOrigin === "use-credentials"
        ? (e.credentials = "include")
        : o.crossOrigin === "anonymous"
        ? (e.credentials = "omit")
        : (e.credentials = "same-origin"),
      e
    );
  }
  function a(o) {
    if (o.ep) return;
    o.ep = !0;
    const e = i(o);
    fetch(o.href, e);
  }
})();
class Parallax {
  constructor(t) {
    t.length &&
      (this.elements = Array.from(t).map(
        (i) => new Parallax.Each(i, this.options)
      ));
  }
  destroyEvents() {
    this.elements.forEach((t) => {
      t.destroyEvents();
    });
  }
  setEvents() {
    this.elements.forEach((t) => {
      t.setEvents();
    });
  }
}
(Parallax.Each = class {
  constructor(s) {
    (this.parent = s),
      (this.elements = this.parent.querySelectorAll("[data-fls-parallax]")),
      (this.animation = this.animationFrame.bind(this)),
      (this.offset = 0),
      (this.value = 0),
      (this.smooth = s.dataset.flsParallaxSmooth
        ? Number(s.dataset.flsParallaxSmooth)
        : 15),
      this.setEvents();
  }
  setEvents() {
    this.animationID = window.requestAnimationFrame(this.animation);
  }
  destroyEvents() {
    window.cancelAnimationFrame(this.animationID);
  }
  animationFrame() {
    const s = this.parent.getBoundingClientRect().top,
      t = this.parent.offsetHeight,
      i = window.innerHeight,
      a = { top: s - i, bottom: s + t },
      o = this.parent.dataset.flsParallaxCenter
        ? this.parent.dataset.flsParallaxCenter
        : "center";
    if (a.top < 30 && a.bottom > -30)
      switch (o) {
        case "top":
          this.offset = -1 * s;
          break;
        case "center":
          this.offset = i / 2 - (s + t / 2);
          break;
        case "bottom":
          this.offset = i - (s + t);
          break;
      }
    (this.value += (this.offset - this.value) / this.smooth),
      (this.animationID = window.requestAnimationFrame(this.animation)),
      this.elements.forEach((e) => {
        const r = {
          axis: e.dataset.axis ? e.dataset.axis : "v",
          direction: e.dataset.flsParallaxDirection
            ? e.dataset.flsParallaxDirection + "1"
            : "-1",
          coefficient: e.dataset.flsParallaxCoefficient
            ? Number(e.dataset.flsParallaxCoefficient)
            : 5,
          additionalProperties: e.dataset.flsParallaxProperties
            ? e.dataset.flsParallaxProperties
            : "",
        };
        this.parameters(e, r);
      });
  }
  parameters(s, t) {
    t.axis == "v"
      ? (s.style.transform = `translate3D(0, ${(
          t.direction *
          (this.value / t.coefficient)
        ).toFixed(2)}px,0) ${t.additionalProperties}`)
      : t.axis == "h" &&
        (s.style.transform = `translate3D(${(
          t.direction *
          (this.value / t.coefficient)
        ).toFixed(2)}px,0,0) ${t.additionalProperties}`);
  }
}),
  document.querySelector("[data-fls-parallax-parent]") &&
    new Parallax(document.querySelectorAll("[data-fls-parallax-parent]")),
  document.addEventListener("click", async function (s) {
    if (s.target.closest(".copy-ca-btn"))
      try {
        const t = document.getElementById("tokenValue").textContent.trim();
        await navigator.clipboard.writeText(t),
          alert("Address copied successfully");
      } catch (t) {
        console.error("Error copying address:", t),
          alert("Failed to copy address. Please try again.");
      }
  }),
  window.addEventListener("load", () => {
    document.documentElement.setAttribute("data-fls-loaded", "");
  });
const bubbles = document.querySelectorAll(".bubbles img");
if (bubbles.length > 0) {
  let s = 0;
  window.addEventListener("scroll", function () {
    const t = window.scrollY;
    t > s
      ? bubbles.forEach((i) => {
          i.classList.remove("scroll-up"),
            i.classList.add("scroll-down"),
            setTimeout(() => {
              i.classList.remove("scroll-down");
            }, 300);
        })
      : t < s &&
        bubbles.forEach((i) => {
          i.classList.remove("scroll-down"),
            i.classList.add("scroll-up"),
            setTimeout(() => {
              i.classList.remove("scroll-up");
            }, 300);
        }),
      (s = t);
  });
}
